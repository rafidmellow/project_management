generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                        @id @default(cuid())
  name               String?
  email              String                        @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               String                        @default("user")
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @updatedAt
  lastLogin          DateTime?
  bio                String?                       @db.Text
  department         String?
  jobTitle           String?
  location           String?
  phone              String?
  skills             String?                       @db.Text
  active             Boolean                       @default(true)
  accounts           Account[]
  activities         Activity[]
  attendanceRecords  Attendance[]
  correctionRequests AttendanceCorrectionRequest[]
  attendanceSettings AttendanceSettings?
  comments           Comment[]
  documents          Document[]
  projects           Project[]
  sessions           Session[]
  taskAssignments    TaskAssignee[]
  taskAttachments    TaskAttachment[]
  teams              TeamMember[]

  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "account_userId_fkey")
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "session_userId_fkey")
  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtoken")
}

model Project {
  id             String          @id @default(cuid())
  title          String
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdById    String
  dueDate        DateTime?
  estimatedTime  Float?
  totalTimeSpent Float?
  activities     Activity[]
  attendances    Attendance[]
  events         Event[]
  createdBy      User            @relation(fields: [createdById], references: [id])
  statuses       ProjectStatus[]
  tasks          Task[]
  teamMembers    TeamMember[]

  @@index([createdById])
  @@map("project")
}

model ProjectStatus {
  id                String   @id @default(cuid())
  name              String
  color             String?
  description       String?
  isDefault         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  order             Int      @default(0)
  projectId         String
  isCompletedStatus Boolean  @default(false)
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks             Task[]

  @@unique([projectId, name])
  @@index([projectId])
  @@map("project_status")
}

model Task {
  id            String           @id @default(cuid())
  title         String
  description   String?          @db.Text
  priority      String           @default("medium")
  dueDate       DateTime?
  projectId     String
  parentId      String?
  order         Int              @default(0)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  endDate       DateTime?
  estimatedTime Float?
  startDate     DateTime?
  statusId      String?
  timeSpent     Float?
  completed     Boolean          @default(false)
  activities    Activity[]
  attendances   Attendance[]
  comments      Comment[]
  parent        Task?            @relation("SubTasks", fields: [parentId], references: [id], onDelete: Cascade)
  subtasks      Task[]           @relation("SubTasks")
  project       Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status        ProjectStatus?   @relation(fields: [statusId], references: [id])
  assignees     TaskAssignee[]
  attachments   TaskAttachment[]

  @@index([projectId])
  @@index([statusId])
  @@index([parentId])
  @@map("task")
}

model TaskAssignee {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
  @@map("task_assignee")
}

model TeamMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("team_member")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  date        DateTime
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([date])
  @@map("event")
}

model Attendance {
  id                   String                        @id @default(cuid())
  userId               String
  checkInTime          DateTime                      @default(now())
  checkOutTime         DateTime?
  checkInLatitude      Float?
  checkInLongitude     Float?
  checkOutLatitude     Float?
  checkOutLongitude    Float?
  checkInIpAddress     String?
  checkOutIpAddress    String?
  checkInDeviceInfo    String?                       @db.Text
  checkOutDeviceInfo   String?                       @db.Text
  totalHours           Float?
  notes                String?                       @db.Text
  createdAt            DateTime                      @default(now())
  updatedAt            DateTime                      @updatedAt
  checkInLocationName  String?                       @db.Text
  checkOutLocationName String?                       @db.Text
  projectId            String?
  taskId               String?
  autoCheckout         Boolean                       @default(false)
  project              Project?                      @relation(fields: [projectId], references: [id])
  task                 Task?                         @relation(fields: [taskId], references: [id])
  user                 User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  correctionRequests   AttendanceCorrectionRequest[]

  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([checkInTime])
  @@map("attendance")
}

model AttendanceSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  workHoursPerDay     Float    @default(8)
  workDays            String   @default("1,2,3,4,5")
  reminderEnabled     Boolean  @default(true)
  reminderTime        String?
  autoCheckoutEnabled Boolean  @default(false)
  autoCheckoutTime    String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attendance_settings")
}

model Activity {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  description String?
  userId      String
  projectId   String?
  taskId      String?
  createdAt   DateTime @default(now())
  project     Project? @relation(fields: [projectId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([createdAt])
  @@index([entityType, entityId])
  @@map("activity")
}

model Document {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  fileType    String
  fileSize    Int
  filePath    String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("document")
}

model AttendanceCorrectionRequest {
  id                    String     @id @default(cuid())
  attendanceId          String
  userId                String
  originalCheckInTime   DateTime
  originalCheckOutTime  DateTime?
  requestedCheckInTime  DateTime
  requestedCheckOutTime DateTime?
  reason                String     @db.Text
  status                String     @default("pending")
  reviewedBy            String?
  reviewedAt            DateTime?
  reviewNotes           String?    @db.Text
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  attendance            Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([attendanceId])
  @@index([userId])
  @@index([status])
  @@map("attendance_correction_request")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@map("comment")
}

model TaskAttachment {
  id        String   @id @default(cuid())
  filename  String
  fileUrl   String
  fileSize  Int
  fileType  String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@map("task_attachment")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  color       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]

  @@map("role")
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  category    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@map("permission")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permission")
}
